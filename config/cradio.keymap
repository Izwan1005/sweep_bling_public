// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    macros {
        norsk_AO: norsk_AO {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_2 &kp KP_NUMBER_9>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "NORSK_AO";
        };
        norsk_AO_cap: norsk_AO_cap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_9 &kp KP_NUMBER_7>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "NORSK_AO_CAP";
        };
        delete_line: delete_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME) &kp BACKSPACE>;
            label = "DELETE_LINE";
        };
        norsk_AE: norsk_AE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_3 &kp KP_NUMBER_0>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "NORSK_AE";
        };
        norsk_AE_CAP: norsk_AE_CAP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_9 &kp KP_NUMBER_8>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "NORSK_AE_CAP";
        };
        norsk_OE: norsk_OE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_4 &kp KP_NUMBER_8>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "NORSK_OE";
        };
        norsk_OE_CAP: norsk_OE_CAP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_1 &kp KP_NUMBER_6>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "NORSK_OE_CAP";
        };
        degree: degree {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_7 &kp KP_NUMBER_6>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "DEGREE";
        };
        par_mid: par_mid {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "PAR_MID";
        };
        brk_mid: brk_mid {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "BRK_MID";
        };
        brc_mid: brc_mid {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "BRC_MID";
        };
        email: email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp Z &kp W &kp A &kp N &kp DOT &kp P &kp E &kp N &kp G &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "EMAIL";
        };
        IKM_ADMIN: IKM_ADMIN {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp DOT &kp BSLH &kp A &kp D &kp M &kp I &kp N &kp I &kp S &kp T &kp R &kp A &kp T &kp O &kp R &kp TAB>;

            label = "IKM_ADMIN";
        };
        IKM_PC: IKM_PC {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_wait_time 500>,
                <&kp LS(A) &kp D &kp A &kp M &kp LS(A) &kp V &kp A &kp N2 &kp N1 &kp N2 &kp N2 &kp ENTER>;

            label = "IKM_PC";
        };
        INS_FIG: INS_FIG {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <150>;
            tap-ms = <150>;
            bindings =
                <&kp LC(LA(R))>,
                <&macro_wait_time 200>,
                <&kp F>,
                <&macro_wait_time 50>,
                <&kp I>,
                <&macro_wait_time 50>,
                <&kp G>,
                <&macro_wait_time 50>,
                <&kp TAB>,
                <&macro_wait_time 300>,
                <&kp DOWN>,
                <&macro_wait_time 150>,
                <&kp DOWN_ARROW>,
                <&macro_wait_time 150>,
                <&kp TAB &kp TAB>;

            label = "INS_FIG";
        };
        INS_TAB: INS_TAB {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <150>;
            tap-ms = <150>;
            bindings =
                <&kp LC(LA(R))>,
                <&macro_wait_time 200>,
                <&kp T>,
                <&macro_wait_time 50>,
                <&kp A>,
                <&macro_wait_time 50>,
                <&kp B>,
                <&macro_wait_time 50>,
                <&kp TAB>,
                <&macro_wait_time 300>,
                <&kp DOWN>,
                <&macro_wait_time 150>,
                <&kp DOWN_ARROW>,
                <&macro_wait_time 150>,
                <&kp TAB &kp TAB>;

            label = "INS_TAB";
        };
        INS_REF: INS_REF {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <150>;
            tap-ms = <150>;
            bindings =
                <&kp LC(LA(R))>,
                <&macro_wait_time 200>,
                <&kp N>,
                <&macro_wait_time 50>,
                <&kp U>,
                <&macro_wait_time 50>,
                <&kp M>,
                <&macro_wait_time 50>,
                <&kp TAB>,
                <&macro_wait_time 300>,
                <&kp DOWN>,
                <&macro_wait_time 150>,
                <&kp DOWN_ARROW>,
                <&macro_wait_time 150>,
                <&kp DOWN_ARROW>,
                <&macro_wait_time 150>,
                <&kp TAB &kp TAB>;

            label = "INS_REF";
        };
        INS_CAP: INS_CAP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp S &kp P>;
            label = "INS_CAP";
            wait-ms = <150>;
        };
    };

    behaviors {
        caps_esc: caps_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_ESC";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE>, <&kp CAPS>;

            tapping-term-ms = <300>;
        };
        ht_tap: HT_TAP {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "tap-preferred";
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
        };
        AO: AO {
            compatible = "zmk,behavior-tap-dance";
            label = "AO";
            #binding-cells = <0>;
            bindings = <&norsk_AO>, <&norsk_AO_cap>;

            tapping-term-ms = <300>;
        };
        QUOT_DQUO: QUOT_DQUO {
            compatible = "zmk,behavior-tap-dance";
            label = "QUOT_DQUO";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;

            tapping-term-ms = <300>;
        };
        AE: AE {
            compatible = "zmk,behavior-tap-dance";
            label = "AE";
            #binding-cells = <0>;
            bindings = <&norsk_AE>, <&norsk_AE_CAP>;

            tapping-term-ms = <300>;
        };
        OE: OE {
            compatible = "zmk,behavior-tap-dance";
            label = "OE";
            #binding-cells = <0>;
            bindings = <&norsk_OE>, <&norsk_OE_CAP>;

            tapping-term-ms = <300>;
        };
        SHFT_SPC: SHFT_SPC {
            compatible = "zmk,behavior-hold-tap";
            label = "SHFT_SPC";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            hold-trigger-key-positions = <32>;
        };
        UND_MINS: UND_MINS {
            compatible = "zmk,behavior-tap-dance";
            label = "UND_MINS";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDER>;

            tapping-term-ms = <300>;
        };
        AMP_CURL: AMP_CURL {
            compatible = "zmk,behavior-tap-dance";
            label = "AMP_CURL";
            #binding-cells = <0>;
            bindings = <&kp AMPERSAND>, <&kp TILDE>;

            tapping-term-ms = <300>;
        };
        SUB_SUP: SUB_SUP {
            compatible = "zmk,behavior-tap-dance";
            label = "SUB_SUP";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LC(EQUAL)>, <&kp LC(LS(EQUAL))>;
        };
        EXC_G: EXC_G {
            compatible = "zmk,behavior-tap-dance";
            label = "EXC_G";
            #binding-cells = <0>;
            bindings = <&kp G>, <&kp EXCLAMATION>;

            tapping-term-ms = <165>;
        };
        QUE_J: QUE_J {
            compatible = "zmk,behavior-tap-dance";
            label = "QUE_J";
            #binding-cells = <0>;
            bindings = <&kp J>, <&kp QUESTION>;

            tapping-term-ms = <165>;
        };
        ht_hold: ht_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "hold-preferred";
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
        };
        B_USB: B_USB {
            compatible = "zmk,behavior-tap-dance";
            label = "B_USB";
            #binding-cells = <0>;
            bindings = <&kp B>, <&out OUT_USB>;

            tapping-term-ms = <160>;
        };
        layer_tap: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "tap-preferred";
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
        };
        V_BLE: V_BLE {
            compatible = "zmk,behavior-tap-dance";
            label = "V_BLE";
            #binding-cells = <0>;
            bindings = <&kp V>, <&out OUT_USB>;

            tapping-term-ms = <160>;
        };
        non_breaking: non_breaking {
            compatible = "zmk,behavior-tap-dance";
            label = "NON_BREAKING";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(SPACE))>, <&kp LS(LC(MINUS))>;

            tapping-term-ms = <300>;
        };
    };

    combos {
        compatible = "zmk,combos";

        NPP_comment {
            bindings = <&kp LC(Q)>;
            key-positions = <0 1>;
            layers = <0>;
        };

        RIGHT_ENT {
            bindings = <&kp ENTER>;
            key-positions = <27 28>;
            layers = <0>;
        };

        Arrow_up {
            bindings = <&kp UP_ARROW>;
            key-positions = <6 7>;
            layers = <0>;
        };

        delete_line_combo {
            bindings = <&delete_line>;
            key-positions = <30 31>;
            layers = <0>;
        };

        numlock {
            bindings = <&kp KP_NUMLOCK>;
            key-positions = <23 24>;
            layers = <0>;
        };

        LEFT_TAB {
            bindings = <&kp TAB>;
            key-positions = <2 3>;
            layers = <0>;
        };

        bootloader_left {
            bindings = <&bootloader>;
            key-positions = <4 14 24>;
            layers = <0>;
        };

        bootloader_right {
            bindings = <&bootloader>;
            key-positions = <5 15 25>;
            layers = <0>;
        };

        reset_left {
            bindings = <&sys_reset>;
            key-positions = <2 12 22>;
            layers = <0>;
        };

        reset_right {
            bindings = <&sys_reset>;
            key-positions = <7 17 27>;
            layers = <0>;
        };

        QUES {
            bindings = <&kp QUESTION>;
            key-positions = <5 6>;
            layers = <0>;
        };

        EXCLAM {
            bindings = <&kp EXCLAMATION>;
            key-positions = <3 4>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp Q                 &kp W               &kp F    &kp P                 &EXC_G                    &QUE_J                     &kp L             &kp U      &kp Y          &kp SEMI
&ht_tap LEFT_SHIFT A  &lt 4 R             &lt 5 S  &lt 2 T               &ht_tap LEFT_GUI D        &kp H                      &kp N             &kp E      &kp I          &ht_tap RIGHT_SHIFT O
&kp Z                 &ht_tap LEFT_ALT X  &kp C    &V_BLE                &B_USB                    &kp K                      &kp M             &kp COMMA  &mt RCTRL DOT  &layer_tap 3 SLASH
                                                   &ht_hold LCTRL ENTER  &layer_tap 1 BACKSPACE    &ht_hold LEFT_SHIFT SPACE  &layer_tap 3 TAB
            >;
        };

        layer_1 {
            bindings = <
&caps_esc   &kp F9      &AE        &INS_TAB    &QUOT_DQUO    &AMP_CURL         &kp UP         &UND_MINS  &OE          &kp CARET
&AO         &kp LSHIFT  &kp LCTRL  &INS_FIG    &IKM_PC       &kp LEFT          &kp DOWN       &kp RIGHT  &kp DOLLAR   &kp HASH
&kp LS(F3)  &kp K_MENU  &INS_CAP   &INS_REF    &IKM_ADMIN    &kp LS(LEFT)      &SUB_SUP       &degree    &kp PERCENT  &kp BSLH
                                   &kp LS(AT)  &trans        &kp LS(LC(LEFT))  &non_breaking
            >;
        };

        layer_2 {
            bindings = <
&trans                   &trans                 &kp F2                      &kp LA(LC(DEL))  &kp LC(ASTRK)        &kp PLUS   &kp N1   &kp N2  &kp N3  &kp STAR
&ht_tap LEFT_SHIFT LEFT  &kp RIGHT_ARROW        &ht_hold LCTRL EXCLAMATION  &trans           &kp C_VOLUME_UP      &kp MINUS  &kp N4   &kp N5  &kp N6  &kp FSLH
&kp LC(LS(N))            &ht_tap LEFT_ALT C_PP  &kp EXCL                    &kp UP_ARROW     &kp C_VOLUME_DOWN    &kp DOT    &kp N7   &kp N8  &kp N9  &kp EQUAL
                                                                            &kp DOWN         &kp LC(BSPC)         &kp N0     &kp TAB
            >;
        };

        layer_3 {
            bindings = <
&kp LALT   &kp F1  &kp F2  &kp F3    &kp F10    &trans  &kp PG_UP  &trans    &trans    &trans
&kp LCTRL  &kp F4  &kp F5  &kp F6    &kp F11    &trans  &kp PG_DN  &trans    &trans    &trans
&kp LSHFT  &kp F7  &kp F8  &kp F9    &kp F12    &trans  &par_mid   &brc_mid  &brk_mid  &trans
                           &kp HOME  &kp END    &email  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &bt BT_CLR  &trans  &trans    &trans  &trans  &trans  &bt BT_SEL 0  &trans
&trans  &trans  &trans      &trans  &trans    &trans  &trans  &trans  &bt BT_SEL 1  &trans
&trans  &trans  &trans      &trans  &trans    &trans  &trans  &trans  &bt BT_SEL 2  &trans
                            &trans  &trans    &trans  &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans            &trans          &trans         &kp DELETE     &trans            &trans                &trans                 &trans  &trans
&trans  &kp LS(LG(S))     &trans          &kp LG(TAB)    &kp LA(TAB)    &trans            &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans  &trans
&trans  &kp C_PLAY_PAUSE  &kp KP_NUMLOCK  &kp C_NEXT     &trans         &trans            &trans                &trans                 &trans  &trans
                                          &kp LS(ENTER)  &kp SPACE      &kp LG(LC(LEFT))  &kp LG(LC(RIGHT))
            >;
        };
    };
};
