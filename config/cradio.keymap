// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&lt { tapping-term-ms = <170>; };

/ {
    macros {
        norsk_AO: norsk_AO {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_2 &kp KP_NUMBER_9>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "NORSK_AO";
        };

        norsk_AO_cap: norsk_AO_cap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_9 &kp KP_NUMBER_7>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "NORSK_AO_CAP";
        };



        norsk_AE: norsk_AE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_3 &kp KP_NUMBER_0>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "NORSK_AE";
        };

        norsk_AE_CAP: norsk_AE_CAP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_9 &kp KP_NUMBER_8>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "NORSK_AE_CAP";
        };

        norsk_OE: norsk_OE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_4 &kp KP_NUMBER_8>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "NORSK_OE";
        };

        norsk_OE_CAP: norsk_OE_CAP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_1 &kp KP_NUMBER_6>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "NORSK_OE_CAP";
        };

    };

    behaviors {
        caps_esc: caps_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_ESC";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE>, <&kp CAPS>;

            tapping-term-ms = <300>;
        };

        ht_tap: HT_TAP {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            flavor = "hold-preferred";
        };

        AO: AO {
            compatible = "zmk,behavior-tap-dance";
            label = "AO";
            #binding-cells = <0>;
            bindings = <&norsk_AO>, <&norsk_AO_cap>;

            tapping-term-ms = <300>;
        };

        QUOT_DQUO: QUOT_DQUO {
            compatible = "zmk,behavior-tap-dance";
            label = "QUOT_DQUO";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;

            tapping-term-ms = <300>;
        };

        AE: AE {
            compatible = "zmk,behavior-tap-dance";
            label = "AE";
            #binding-cells = <0>;
            bindings = <&norsk_AE>, <&norsk_AE_CAP>;

            tapping-term-ms = <300>;
        };

        OE: OE {
            compatible = "zmk,behavior-tap-dance";
            label = "OE";
            #binding-cells = <0>;
            bindings = <&norsk_OE>, <&norsk_OE_CAP>;

            tapping-term-ms = <300>;
        };

        SHFT_SPC: SHFT_SPC {
            compatible = "zmk,behavior-hold-tap";
            label = "SHFT_SPC";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            hold-trigger-key-positions = <32>;
        };

        UND_MINS: UND_MINS {
            compatible = "zmk,behavior-tap-dance";
            label = "UND_MINS";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDER>;

            tapping-term-ms = <300>;
        };

        AMP_CURL: AMP_CURL {
            compatible = "zmk,behavior-tap-dance";
            label = "AMP_CURL";
            #binding-cells = <0>;
            bindings = <&kp AMPERSAND>, <&kp TILDE>;

            tapping-term-ms = <300>;
        };

        SUB_SUP: SUB_SUP {
            compatible = "zmk,behavior-tap-dance";
            label = "SUB_SUP";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LC(EQUAL)>, <&kp LC(LS(EQUAL))>;
        };

        EXC_G: EXC_G {
            compatible = "zmk,behavior-tap-dance";
            label = "EXC_G";
            #binding-cells = <0>;
            bindings = <&kp G>, <&kp EXCLAMATION>;

            tapping-term-ms = <200>;
        };

        QUE_J: QUE_J {
            compatible = "zmk,behavior-tap-dance";
            label = "QUE_J";
            #binding-cells = <0>;
            bindings = <&kp J>, <&kp QUESTION>;

            tapping-term-ms = <165>;
        };

        ht_hold: ht_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "hold-preferred";
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
        };

        B_USB: B_USB {
            compatible = "zmk,behavior-tap-dance";
            label = "B_USB";
            #binding-cells = <0>;
            bindings = <&kp B>, <&out OUT_USB>;

            tapping-term-ms = <165>;
        };

        layer_tap: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "tap-preferred";
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
        };

        V_BLE: V_BLE {
            compatible = "zmk,behavior-tap-dance";
            label = "V_BLE";
            #binding-cells = <0>;
            bindings = <&kp V>, <&out OUT_USB>;

            tapping-term-ms = <165>;
        };

        non_breaking: non_breaking {
            compatible = "zmk,behavior-tap-dance";
            label = "NON_BREAKING";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(SPACE))>, <&kp LS(LC(MINUS))>;

            tapping-term-ms = <300>;
        };

        CTRL_at: CTRL_at {
            compatible = "zmk,behavior-hold-tap";
            label = "CTRL_AT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        SHFT_ID: SHFT_ID {
            compatible = "zmk,behavior-hold-tap";
            label = "SHFT_ID";
            bindings = <&kp>, <&NOR_ID>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        cap_I: cap_I {
            compatible = "zmk,behavior-tap-dance";
            label = "CAP_I";
            #binding-cells = <0>;
            bindings = <&kp I>, <&kp LS(I)>;

            tapping-term-ms = <200>;
        };

        DOT_COMM: DOT_COMM {
            compatible = "zmk,behavior-tap-dance";
            label = "DOT_COMM";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp DOT>, <&kp COMMA>;
        };
    };

    combos {
        compatible = "zmk,combos";

        NPP_comment {
            bindings = <&kp LC(Q)>;
            key-positions = <1 2>;
            layers = <0>;
        };

        RIGHT_ENT {
            bindings = <&kp ENTER>;
            key-positions = <27 28>;
            layers = <0 2>;
        };

        delete_line_combo {
            bindings = <&delete_line>;
            key-positions = <30 31>;
            layers = <0>;
        };

        bootloader_left {
            bindings = <&bootloader>;
            key-positions = <4 14 24>;
            layers = <0>;
        };

        QUES {
            bindings = <&kp QUESTION>;
            key-positions = <15 16>;
            layers = <0>;
        };

        EXCLAM {
            bindings = <&kp EXCLAMATION>;
            key-positions = <14 13>;
            layers = <0>;
        };

        NPP_hideline {
            bindings = <&kp LA(H)>;
            key-positions = <1 0>;
        };

        Numpad {
            bindings = <&tog 2>;
            key-positions = <22 21 23>;
            layers = <2 0>;
        };

        NE_mins {
            bindings = <&kp MINUS>;
            key-positions = <16 17>;
            layers = <0>;
        };

        EI_unds {
            bindings = <&kp UNDER>;
            key-positions = <17 18>;
            layers = <0>;
        };

        VB_OF-hide {
            bindings = <&kp LC(H)>;
            key-positions = <23 24>;
            layers = <0>;
        };

        PG_OF-elevation {
            bindings = <&kp LC(E)>;
            key-positions = <4 3>;
            layers = <0>;
        };

        duplicateLine {
            bindings = <&kp LC(LA(UP_ARROW))>;
            key-positions = <0 4>;
            layers = <0>;
        };

        UY_dquo {
            bindings = <&kp KP_PLUS>;
            key-positions = <7 6>;
            layers = <0>;
        };

        UY_equal {
            bindings = <&kp EQUAL>;
            key-positions = <7 8>;
            layers = <0>;
        };

        R_thumb_date {
            bindings = <&kp F5>;
            key-positions = <33 25>;
            layers = <0>;
        };

        L_thumb_GUI {
            bindings = <&kp LEFT_GUI>;
            key-positions = <24 30>;
            layers = <0>;
        };

        RESET {
            bindings = <&bootloader>;
            key-positions = <4 14 24 31>;
            layers = <0>;
        };

        SOFT_OFF {
            bindings = <&soft_off>;
            key-positions = <0 9>;
            layers = <0>;
        };

        Right_E {
            bindings = <&kp E>;
            key-positions = <3 2>;
            layers = <0>;
        };

        sublime_comment {
            bindings = <&kp LC(SLASH)>;
            key-positions = <11 12>;
            layers = <0>;
            timeout-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp Q                 &kp W    &kp F    &kp P                 &kp G                     &kp J                     &kp L          &kp U            &kp Y              &lt 6 SEMICOLON
&lt 2 A               &lt 3 R  &lt 4 S  &lt 5 T               &kp D                     &kp H                     &kp N          &kp E            &kp I              &kp O
&ht_tap LEFT_SHIFT Z  &kp X    &kp C    &kp V                 &kp B                     &kp K                     &kp M          &mt RCTRL COMMA  &mt RIGHT_ALT DOT  &mt LC(LEFT_SHIFT) SLASH
                                        &ht_hold LCTRL ENTER  &layer_tap 1 BACKSPACE    &ht_tap LEFT_SHIFT SPACE  &lt 7 LA(TAB)
            >;
        };

        Macros {
            bindings = <
&caps_esc   &kp F9             &INS_CAP           &INS_TAB      &NOR_ID       &sel_line           &none         &kp INS           &kp K_CMENU       &kp F14
&AO         &ACROBAT_accept    &INS_HIGHLIGHT     &INS_FIG      &IKM_PC       &kp LC(LS(LEFT))    &select_word  &AE               &INS_FONTCOLOR    &OE
&kp LS(F3)  &ACROBAT_complete  &merge_cell_words  &INS_REF      &IKM_ADMIN    &kp LS(LEFT_ARROW)  &SUB_SUP      &APDL_nodeNumber  &kp LC(LG(LEFT))  &kp LC(LG(RIGHT))
                                                  &WIN_new_txt  &trans        &non_breaking       &SHAPR3D
            >;
        };

        Numbers {
            bindings = <
&kp LS(LEFT_ALT)  &kp HOME                 &kp UP_ARROW      &kp END                     &kp TAB                        &kp KP_PLUS      &kp KP_NUMBER_1  &kp KP_NUMBER_2        &kp KP_NUMBER_3              &kp KP_MULTIPLY
&trans            &kp LEFT_ARROW           &kp DOWN          &kp RIGHT                   &kp C_VOLUME_UP                &kp KP_SUBTRACT  &kp KP_N4        &mt RCTRL KP_NUMBER_5  &mt RIGHT_SHIFT KP_NUMBER_6  &kp KP_DIVIDE
&kp KP_NUMLOCK    &ht_tap LEFT_ALT C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT                  &kp C_VOLUME_DOWN              &DOT_COMM        &kp KP_N7        &kp KP_N8              &kp KP_N9                    &kp EQUAL
                                                             &ht_tap LA(LCTRL) KP_ENTER  &ht_tap LS(LCTRL) BACKSPACE    &kp KP_NUMBER_0  &kp TAB
            >;
        };

        additional {
            bindings = <
&trans  &trans  &trans      &kp F9   &kp C_AL_WWW            &trans  &trans  &trans  &trans  &trans
&none   &trans  &kp DELETE  &kp F10  &PPT_bring_front        &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans      &kp F12  &EXCEL_resize_column    &trans  &trans  &trans  &trans  &trans
                            &trans   &mkp RCLK               &trans  &trans
            >;
        };

        Symbol {
            bindings = <
&none  &none          &none   &kp HASH           &kp MINUS         &plusminus               &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp AMPERSAND  &kp CARET
&none  &kp LS(LG(S))  &trans  &kp SINGLE_QUOTE   &kp UNDERSCORE    &degree                  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOLLAR     &sigma_stress
&none  &kp LEFT_ALT   &none   &kp DOUBLE_QUOTES  &kp TILDE         &kp EQUAL                &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PERCENT    &kp BACKSLASH
                              &mt LCTRL AT       &kp SPACE         &mt LEFT_SHIFT KP_EQUAL  &none
            >;
        };

        Functions {
            bindings = <
&kp LA(LC(DELETE))  &none        &kp F2      &trans                &kp LC(LS(N8))    &trans     &kp F1  &kp F2  &kp F3  &kp F10
&kp LA(TAB)         &kp LG(TAB)  &kp TAB     &trans                &kp F12           &trans     &kp F4  &kp F5  &kp F6  &kp F11
&kp LC(LS(N))       &kp LALT     &kp LC(N5)  &trans                &trans            &trans     &kp F7  &kp F8  &kp F9  &kp F12
                                             &ht_tap LCTRL DELETE  &kp LC(BSPC)      &kp LSHFT  &trans
            >;
        };

        Bluetooth {
            bindings = <
&bt BT_CLR    &trans  &trans  &soft_off  &trans    &none         &trans        &trans        &bt BT_NXT    &none
&out OUT_BLE  &none   &trans  &trans     &trans    &bt BT_SEL 0  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 1  &bt BT_SEL 2
&out OUT_USB  &none   &trans  &trans     &trans    &none         &none         &none         &none         &none
                              &trans     &trans    &trans        &none
            >;
        };

        Arrow {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans    &trans    &kp UP_ARROW    &trans     &trans
&trans  &trans  &trans  &trans  &trans    &trans    &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans    &kp RGUI  &trans    &trans          &trans     &trans
                        &trans  &trans    &trans    &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
